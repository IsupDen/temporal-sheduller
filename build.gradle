plugins {
    id 'java-library'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'maven-publish'
    id 'jacoco'
}

group = 'ru.isupden'
version = '0.0.9-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

jacoco {
    toolVersion = "0.8.13"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    compileOnly  'jakarta.annotation:jakarta.annotation-api:2.1.1'
    api          'io.temporal:temporal-sdk:1.29.0'
    compileOnly  'org.springframework.boot:spring-boot-autoconfigure'
    compileOnly  'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    testRuntimeOnly    'org.junit.platform:junit-platform-launcher'
    testImplementation 'io.temporal:temporal-testing:1.29.0'
}

tasks.named('bootJar') { enabled = false }
tasks.named('jar')    { enabled = true  }

publishing {
    publications {
        register("mavenJava", MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            name = "github"
            url = uri("https://maven.pkg.github.com/IsupDen/temporal-sheduller")
            credentials {
                username = System.getenv("USERNAME")
                password = System.getenv("TOKEN")
            }
        }
    }
}

tasks.named('test') {
    jvmArgs = [
            "-javaagent:${configurations.testRuntimeClasspath.find { it.name.contains('byte-buddy-agent') }}"
    ]
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.6
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification
